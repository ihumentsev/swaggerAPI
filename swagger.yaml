openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: Swagger API PETLY
    url: https://petly-bc26.cyclic.app/
info:
  version: "1.0.0"
  title: API TEAM-PROJECT PETLY
  description: main roads to create requests
paths:
  /api/users/signup:
    post:
      tags:
        - Auth
      operationId: register
      responses:
        "200":
          description: successfully registered user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
  /api/users/login:
    post:
      tags:
        - Auth
      operationId: Login
      responses:
        "201":
          description: successfully login user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"

  /api/users/logout:
    post:
      tags:
        - Auth
      description: Must have active token,  post token in block Authorize
      operationId: Logout
      responses:
        "201":
          description: successfully logout user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logout"

  /api/usersinfo/:
    get:
      tags:
        - User
      summary: "Get current user"
      description: Must have active token,  post token in block Authorize
      operationId: getCurrentUser

      responses:
        "200":
          description: response, Returns user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"

  /api/usersinfo/update:
    patch:
      tags:
        - User
      summary: "User update"
      operationId: UserUpdate
      description: Must have active token,  post token in block Authorize
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserUpdate"

  /api/pets:
    post:
      tags:
        - User
      summary: "Create pet"
      operationId: createPet
      description: Must have active token,  post token in block Authorize
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPet"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserPetCreate"

  /api/pets/:id:
    delete:
      tags:
        - User
      summary: "Deleted pet by ID"
      operationId: createPet
      description: Must have active token,  post token in block Authorize
      parameters:
      - name: "_id"
        in: "path"
        description: "ID of pet to delete"
        required: true
        schema:
         type: string
         example: 639b03daf61a81ebdc5ee19f
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedPet"

  /api/notices:
    get:
      tags:
        - Notices
      operationId: getNotices
      
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notices"
           
  /api/notices/create:
    post:
      tags:
        - Notices
      operationId: getNotices
      description: Must have active token,  post token in block Authorize
      
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notice"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateNotice"

  /api/notices/category/{category}:
    get:
      tags:
        - Notices
      summary: "search by category "
      operationId: getNoticeCategory
      parameters:
      - name: "category"
        in: "path"
        description: "category of notices"
        required: true
        schema:
         type: string
         enum: [sell, lost-found, for-free]
         example: lost-found
      responses:
        "200":
          description: response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ResNoticesCategory"
                  
  /api/notices/{noticeId}:
    get:
      tags:
        - Notices
      summary: "search by id "
      operationId: getNoticeCategory
      parameters:
      - name: "noticeId"
        in: "path"
        description: "id of notices"
        required: true
        schema:
         type: string
         example: 6399e0f49b156ec8b9e8d3dd
      responses:
        "200":
          description: response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Notice"                

  /api/notices/favorites/{noticeId}:
    get:
      tags:
        - Notices
      summary: "Add note to favorites"
      operationId: getNoticeCategory
      parameters:
      - name: "noticeId"
        in: "path"
        description: "id of notices"
        required: true
        schema:
         type: string
         example: 6399e0f49b156ec8b9e8d3dd
      responses:
        "200":
          description: response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/NoticesFavorites"                    
  
  /api/notices/favorites:
    get:
      tags:
        - Notices
      operationId: getFavoritesNotices
      
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notices"

  /api/notices/favorites/delete/{noticeId}:
    delete:
      tags:
        - Notices
      summary: "Delete note from favorites"
      operationId: deletedFavorites
      parameters:
      - name: "noticeId"
        in: "path"
        description: "id of notices"
        required: true
        schema:
         type: string
         example: 6399e0f49b156ec8b9e8d3dd
      responses:
        "200":
          description: response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/DeleteNoticesFavorites"

  /api/notices/personal:
    get:
      tags:
        - Notices
      operationId: getFavoritesPersonal
      
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notices"

  /api/notices/delete/{noticeId}:
    delete:
      tags:
        - Notices
      summary: "Delete from personal notices"
      operationId: deletedNotices
      parameters:
      - name: "noticeId"
        in: "path"
        description: "id of notices"
        required: true
        schema:
         type: string
         example: 6399e0f49b156ec8b9e8d3dd
      responses:
        "200":
          description: response
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/DeletePersonalNotices"

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - password
        - email
        - city
        - phone
        - name
      properties:
        password:
          type: string
          example: qwerty123
        email:
          type: string
          example: tomat@Nulla.com
        city:
          type: string
          example: Kiev, Shevchenko 38
        phone:
          type: string
          example: +380509008562
        name:
          type: string
          example: Andrii

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example:
        email:
          type: string
          example: tomat@Nulla.com
        phone:
          type: string
          example: +380509008562 
        city:
          type: string
          example: Kiev, Shevchenko 38    
        birthday:
          type: string
          example: 2015.07.11    
        image:
          type: string
          format: binary

    UserLogin:
      type: object
      required:
        - password
        - email
      properties:
        password:
          type: string
          example: qwerty123
        email:
          type: string
          example: tomat@Nulla.com

    User:
      type: object
      properties:
        email:
          type: string
          example: tomat@Nulla.com
        city:
          type: string
          example: Kiev, Shevchenko 38
        phone:
          type: string
          example: +380509008562
        name:
          type: string
          example: Andrii
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2Mzk4YzQ2YWZhOTE0N2NlYThmNGYyNTUiLCJpYXQiOjE2NzA5NTYx
        avatarURL:
          type: string
          example: //www.gravatar.com/avatar/70e981b9c72ab985cf3eb1e22cb143ae
        _id:
          type: string
          example: 6398c46afa9147cea8f4f255
        createdAt:
          type: string
          example: 2022-12-13T18:28:58.401Z
        updatedAt:
          type: string
          example: 2022-12-13T18:28:58.401Z
        __v:
          type: number
          example: 0

    CurrentUser:
      type: object
      properties:
        email:
          type: string
          example: tomat@Nulla.com
        city:
          type: string
          example: Kiev, Shevchenko 38
        phone:
          type: string
          example: +380509008562
        name:
          type: string
          example: Andrii
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2Mzk4YzQ2YWZhOTE0N2NlYThmNGYyNTUiLCJpYXQiOjE2NzA5NTYx
        avatarURL:
          type: string
          example: //www.gravatar.com/avatar/70e981b9c72ab985cf3eb1e22cb143ae
        _id:
          type: string
          example: 6398c46afa9147cea8f4f255
        createdAt:
          type: string
          example: 2022-12-13T18:28:58.401Z
        updatedAt:
          type: string
          example: 2022-12-13T18:28:58.401Z
        __v:
          type: number
          example: 0
        userPets:
          type: array
          items:
            $ref: "#/components/schemas/Pet"
    
    UserPetCreate:
      type: object
      required:
        - name
        - breed
      properties:
        name:
          type: string
          example: bimba
        birthday:
          type: string
          example: 2015.12.07
        breed:
          type: string
          example: labrador
        image:
          type: string
          format: binary
        comments:
          type: string
          example: SFHDBfhrgjrjgn  

    UserPet:
      type: object
      properties:
        name:
          type: string
          example: bimba
        birthday:
          type: string
          example: 2015.12.07
        breed:
          type: string
          example: labrador
        photoURL:
          type: string
          example: https://www.novochag.ru/upload/img_cache/cdb/cdb894b14356d88d490e59b3199e3845
        photoId:
          type: string
          example: 65657444466565
        comments:
          type: string
          example: SFHDBfhrgjrjgn  
        owner:
          type: string
          example: 6399a977c2931ae12be83fdd 
        _id:
          type: string
          example: 639b03daf61a81ebdc5ee19f
        createdAt:
          type: string
          example: 2022-12-15T11:24:10.750Z
        updatedAt:
          type: string
          example: 2022-12-15T11:24:10.750Z

    Logout:
      type: object
      properties:
        status:
          type: string
          example: success

    ResNoticesCategory:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: success
        data:
          type: array
          items:  
           $ref: "#/components/schemas/Notice"         
        totalPages: 
          type: number
          example: 0
        page: 
          type: number
          example: 1

    NoticesFavorites:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: success
        massage: 
          type: string
          example: Notice is added to favorites
    
    DeleteNoticesFavorites:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: success
        massage: 
          type: string
          example: Notice is deleted from favorites

    DeletePersonalNotices:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: success
        massage: 
          type: string
          example: Notice is removed

    DeletedPet:
      type: object
      properties:
        status:
          type: string
          example: success 
        code:
          type: string
          example: 200
        message:
          type: string
          example: Pet deleted         

    Notices:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: success  
        data:
          type: array
          items:
            $ref: "#/components/schemas/Notice"      
    
    Notice:
      type: object
      properties:
        _id:
          type: string
          example: 6398c46afa9147cea8f4f255
        category:
          type: string
          example: sell
        title:
          type: string
          example: some title
        name:
          type: string
          example: some name  
        birthday:
          type: string
          example: 2015.10.12
        breed:
          type: string
          example: some breed
        sex:
          type: string
          example: male
        location:
          type: string
          example: Kyiv, Kyivska
        photoURL:
          type: string
          example: photo URL
        photoId:
          type: string
          example: photo _id
        comments:
          type: string
          example: comments
        price:
          type: number
          example: 100
        owner:
          type: object
          properties:
            _id:
              type: string
              example: 639ba8b911a96288f72e3da7
            email:
              type: string
              example: yatomat2@gmail.com  
            phone:
              type: string
              example: +38 (066) 733 88 45

    CreateNotice:
      type: object
      properties:
        category:
          type: string
          enum: ["sell", "lost-found", "for-free" ]
        title:
          type: string
          example: some title
        name:
          type: string
          example: some name  
        birthday:
          type: string
          example: 2015.10.12
        breed:
          type: string
          example: some breed
        sex:
          type: string
          enum: ["male", "female" ]
        location:
          type: string
          example: Kyiv, Kyivska
        photoURL:
          type: string
          example: photo URL
        photoId:
          type: string
          example: photo _id
        comments:
          type: string
          example: comments
        price:
          type: number
          example: 100
        image:
          type: string
          format: binary
              
    Pet:
      type: object
      properties:
        _id:
          type: string
          example: 6398c46afa9147cea8f4f255
        name:
          type: string
          example: barbos
        birthday:
          type: string
          example: 2015.07.12
        breed:
          type: string
          example: labrador
        photoURL:
          type: string
          example: https://www.novochag.ru/upload/img_cache/cdb
        photoId:
          type: string
          example: https://www.novochag.ru/upload/img_cache/cdb
        comments:
          type: string
          example: Good pet
        owner:
          type: string
          example: 6398c46afa9147cea8f4f255
        createdAt:
          type: string
          example: 2022-12-14T18:34:54.619Z
        updatedAt:
          type: string
          example: 2022-12-14T18:34:54.619Z

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
